#!/usr/bin/env ruby
require "rubygems" # ruby1.9 doesn't "require" it though
require_relative 'barcode'
require_relative 'dev_input'
require 'thor'
class BarcodeCli < Thor
  attr_accessor :barcode

  def initialize(a,b,c)
    @barcode=Barcode.new
    super
  end

  desc "install", "inistall the program and create the dependency"
  def install
    barcode.install
  end

  desc "update", "update the data base from the server "
  def update
    barcode.update
  end

  # desc "iterate", "get number from data base and speak"
  # def iterate
  #   while(true)do
  #     number=ask("Number: ")
  #     name=barcode.getname(number.chomp)
  #     barcode.speak(name)
  #   end    
  # end

  desc "single", "get number from data base and speak"
  def single(number)
    # pass to daemon
    output = open(barcode.config_vars['pipe_path'], "w+") # the w+ means we don't block
    output.puts number
    output.flush # do this when we're done writing data
  end

  desc "config","set configuration"
  def config(database_path, pipe_path, server)
    barcode.save_config(database_path,pipe_path,server)
  end

  desc "daemon", "run barcode speaker daemon"
  def daemon
    input = open(barcode.config_vars['pipe_path'], "r+")
    while true
      number = input.gets
      number.chomp!
      if number.size > 0
        puts number
        puts number.size
        name=barcode.getname(number)
        barcode.speak(name)
      else
        puts 'tick'
      end
      sleep 1
    end
  end

  desc "update", "update the data base from the server "
  def getname(number)
    puts barcode.getname(number)
  end
  desc "update", "update the data base from the server "
  def speak(str)
    barcode.speak(str)
  end
  desc "listener","Listen to input events"
  def listener
    while(true) do
      begin
      if(File.exists?("/dev/input/by-id/usb-Honeywell_Scanning_and_Mobility_Honeywell_Scanning_and_Mobility_Scanner-event-kbd"))
        pipe_path="/dev/input/by-id/usb-Honeywell_Scanning_and_Mobility_Honeywell_Scanning_and_Mobility_Scanner-event-kbd"
        ctrl_hold=false
        shift_hold=false
        dev = DevInput.new pipe_path
        buffer=""
        dev.each do |event|
          case event.value_str
            when "Press"
              case event.code_str
                when "Enter"
                  name=barcode.getname(buffer)
                  barcode.speak(name)
                  buffer=""
                when 'LeftShift'
                shift_hold=true
                when 'LeftControl'
                ctrl_hold=true
                else
                if ctrl_hold==true
                else
                buffer+=event.code_str
                end
              end
            when 'Release'
              case event.code_str
                when 'LeftControl'
                  ctrl_hold=false
                when 'LeftShift'
                  shift_hold=false
              end
          end
          puts "got event #{event.code_str} #{event.value_str} #{event.type_str}"
        end
      end
      rescue => e
      end
    end  
  end
  desc "speakg","Listen to input events"
  def lesten()
    while(true)do
      num=gets.chomp
      self.speak(num)
    end
  end
end

BarcodeCli.start(ARGV)
